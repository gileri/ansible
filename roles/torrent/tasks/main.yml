---
- name: Detect which firewall is enabled
  include_role:
    name: common
    tasks_from: firewall_detection

- name: Allow Bittorrent traffic in firewall
  ufw:
    rule: allow
    proto: tcp
    to_port: "{{ rtorrent_bittorrent_port }}"
  when: firewall is defined and firewall == "ufw"

- name: Allow DHT traffic in firewall
  ufw:
    rule: allow
    proto: udp
    to_port: "{{ rtorrent_dht_port }}"
  when: firewall is defined and firewall == "ufw"

- name: Install rtorrent and extra dependencies
  package:
    name:
      - rtorrent
      - sox
      - ffmpeg

- name: Create group
  group:
    name: "{{ torrent_group }}"

- name: Create user
  user:
    name: "{{ torrent_user }}"
    groups: "{{ torrent_group }}"
    shell: "{{ torrent_shell }}"
    home: "{{ torrent_home }}"
  register: user_info

- name: Ensure rtorrent directory exists
  file:
    state: directory
    path: "{{ rtorrent_var_dir }}"
    owner: torrent
    group: torrent
    mode: "0750"

- name: Create rtorrent config directory
  file:
    path: "{{ rtorrent_config_dir }}"
    state: directory
    owner: root
    group: torrent

- name: Copy rtorrent config
  template:
    src: templates/rtorrent.rc
    dest: "{{ rtorrent_config_dir }}/rtorrent.rc"
    owner: "{{ torrent_user }}"
    group: "{{ torrent_group }}"
  notify: Restart rtorrent

- name: Copy systemd service
  template:
    src: templates/rtorrent.service
    dest: /etc/systemd/system/rtorrent.service
  notify:
    - Restart rtorrent

- name: Create temporary files at boot
  template:
    src: templates/rtorrent_tmpfiles.j2
    dest: /etc/tmpfiles.d/rtorrent.conf
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart rtorrent

- name: Start and enable systemd service
  systemd:
    name: rtorrent.service
    state: started
    enabled: true
    daemon_reload: true

# TODO logrotate

- name: Check whether rutorrent is installed
  command:
    cmd: pacman -Q rutorrent
  changed_when: false
  register: rutorrent_pacman_status
  failed_when: rutorrent_pacman_status.rc not in (0, 1)

- name: Install rutorrent dependencies
  pacman:
    name:
      - php
      - curl
      - gzip
      - coreutils

- name: Build and install rutorrent
  become: true
  become_user: aur_builder
  when: rutorrent_pacman_status.rc != 0 or force_rutorrent_installation
  block:
    - name: Set random build directory
      set_fact:
        rutorrent_build_folder: "/tmp/rutorrent{{ 99999 | random }}"
      run_once: true
    - name: Get rutorrent package
      git:
        repo: https://aur.archlinux.org/rutorrent.git
        dest: "{{ rutorrent_build_folder }}"
    - name: Build rutorrent package
      command:
        chdir: "{{ rutorrent_build_folder }}"
        cmd: makepkg --force --noconfirm --noprogressbar
      environment:
        # Workaround until https://github.com/ansible-collections/community.general/pull/650
        PKGEXT: .pkg.tar.xz
    - name: Find build package file
      find:
        paths: "{{ rutorrent_build_folder }}"
        patterns: rutorrent*.pkg.*
      register: rutorrent_package_path
      failed_when: rutorrent_package_path.matched != 1
    - name: Install rutorrent
      become: true
      become_user: root
      pacman:
        name: "{{ rutorrent_package_path.files[0].path }}"
    - name: Clean build folder
      file:
        path: "{{ rutorrent_build_folder }}"
        state: absent

- name: Add rutorrent nginx configuration
  template:
    src: templates/nginx_rutorrent.conf
    dest: /etc/nginx/sites-enabled/rutorrent.conf
  notify: Reload nginx

- name: Add rutorrent basic authorization credentials
  template:
    src: templates/rutorrent.htpasswd
    dest: /etc/nginx/snippets/
  notify: Reload nginx

- name: Replace rutorrent configuration
  template:
    src: templates/rutorrent_config.php
    dest: /etc/webapps/rutorrent/conf/config.php

- name: Create rutorrent var directories
  file:
    path: "/var/lib/rutorrent/{{ item }}"
    state: directory
    mode: 0770
    owner: http
    group: torrent
  loop:
    - torrents
    - settings

- name: Add web server user to torrent group
  user:
    name: http
    append: true
    groups: torrent
  notify: Restart nginx

- name: Configure nginx for media serving
  import_tasks: web_media.yml
