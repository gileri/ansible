---
- name: Assert that mount names are valid
  assert:
    that: item.name is regex("^[a-zA-Z0-9_]*$")
  loop: "{{ s3_backups }}"

- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"

- name: Install packages
  package:
    name:
      - sshfs

- name: Install minio from distribution repositories
  package:
    name:
      - "{{ rclone_package }}"
  when: rclone_package is defined

- name: Create backup puller initiator user
  user:
    name: "{{ backup_puller_initiator_user }}"
  register: backup_puller_initiator_user_info

- name: Create backup puller config directory
  file:
    path: "{{ backup_puller_config_dir }}"
    state: directory
    owner: "{{ backup_puller_initiator_user }}"
    group: "{{ backup_puller_initiator_user_info.group }}"
    mode: 0750


- name: Configure rclone
  template:
    src: rclone.conf.j2
    dest: "{{ rclone_config_file }}"
    owner: "{{ backup_puller_initiator_user }}"
    group: "{{ backup_puller_initiator_user_info.group }}"

- name: Ensure configuration is valid # TODO
  command: "{{ rclone_path }} --config {{ rclone_config_file }} config dump"
  changed_when: false
  become: true
  become_user: "{{ backup_puller_initiator_user }}"
  register: rclone_config_dump

- name: Create SSH configuration directory
  file:
    path: "~backup_puller/.ssh"
    state: directory
    mode: 0700
    owner: "{{ backup_puller_initiator_user }}"
    group: "{{ backup_puller_initiator_user }}"

- name: Generate SSH key pair
  openssh_keypair:
    path: "~backup_puller/.ssh/id_rsa"  # TODO discover root home
    owner: "{{ backup_puller_initiator_user }}"
    group: "{{ backup_puller_initiator_user }}"
    mode: 0600

- name: Add targets to known_hosts
  known_hosts:
    key: "{{ item.key }}"
    name: "{{ item.name }}"
    hash_host: true
  loop: "{{ backup_puller_initiator_known_hosts }}"
  become: true
  become_user: "{{ backup_puller_initiator_user }}"

- name: Create systemd target
  template:
    src: backups.target.j2
    dest: /etc/systemd/system/backups.target
    owner: root
    group: root
    mode: 0644
  when: use_timers is false

- name: Create shutdown service
  template:
    src: shutdown.service
    dest: /etc/systemd/system/
  when: use_timers is false

- name: Add services
  template:
    src: templates/backup.service.j2
    dest: "/etc/systemd/system/{{ systemd_prefix }}{{ item.name }}.service"
    owner: root
    group: root
    mode: 0644
  loop: "{{ s3_backups }}"
  notify: Reload systemd units

- name: Add timers
  template:
    src: templates/backup.timer.j2
    dest: "/etc/systemd/system/{{ systemd_prefix }}{{ item.name }}.timer"
    owner: root
    group: root
    mode: 0644
  loop: "{{ s3_backups }}"
  when: use_timers is true

- name: Start and enable timers
  systemd:
    name: "{{ systemd_prefix }}{{ item.name }}.timer"
    state: started
    enabled: true
    daemon_reload: true
  loop: "{{ s3_backups }}"
  when: use_timers is true

- name: Start and enable services
  systemd:
    name: "{{ systemd_prefix }}{{ item.name }}.service"
    state: started
    enabled: true
    daemon_reload: true
  loop: "{{ s3_backups }}"
  when: use_timers is false

- name: Enable target
  systemd:
    name: backups.target
    enabled: true
    daemon_reload: true
  when: use_timers is false

- name: Enable shutdown service
  systemd:
    name: shutdown.service
    enabled: true
    daemon_reload: true
  when: use_timers is false
